{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Data Pipeline Configuration Schema",
  "description": "Schema for configuring data processing pipelines with detailed components, their relationships, and data schemas.",
  "type": "object",
  "properties": {
    "pipeline_id": {
      "type": "string",
      "description": "Unique identifier for the entire pipeline configuration."
    },
    "pipeline_description": {
      "type": "string",
      "description": "A high-level description of the pipeline and its purpose."
    },
    "execution_mode": {
      "type": "string",
      "enum": [
        "incremental",
        "batch",
        "stream"
      ],
      "description": "Mode in which the pipeline executes."
    },
    "threads": {
      "type": "integer",
      "minimum": 1,
      "description": "Number of threads allocated for pipeline execution."
    },
    "batch_size": {
      "type": "integer",
      "minimum": 1,
      "description": "Size of data batches processed in batch mode."
    },
    "incremental": {
      "type": "boolean",
      "description": "Flag indicating if the pipeline should run in incremental mode."
    },
    "last_processed_timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp of the last processed data."
    },
    "bulk_processing": {
      "type": "boolean",
      "description": "Flag indicating if bulk processing is enabled."
    },
    "steps": {
      "type": "array",
      "description": "Ordered list of pipeline components (steps) along with their relationships and data schemas.",
      "items": {
        "type": "object",
        "properties": {
          "component_id": {
            "type": "string",
            "description": "Unique identifier for the component."
          },
          "description": {
            "type": "string",
            "description": "A description of the component's purpose or behavior."
          },
          "parent": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier of the parent component; null if this is a root component."
          },
          "children": {
            "type": "array",
            "description": "List of identifiers of child components.",
            "items": {
              "type": "string"
            }
          },
          "step": {
            "type": "string",
            "enum": [
              "read",
              "filter",
              "split",
              "group",
              "join",
              "write",
              "hook",
              "custom"
            ],
            "description": "The type of processing step."
          },
          "component_schema": {
            "type": "object",
            "description": "Schema of the data flowing through the component.",
            "properties": {
              "columns": {
                "type": "array",
                "description": "List of columns and their data types.",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the column."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "string",
                        "number",
                        "boolean",
                        "date",
                        "timestamp",
                        "json"
                      ],
                      "description": "Data type of the column."
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              }
            },
            "required": [
              "columns"
            ]
          },
          "source": {
            "type": "object",
            "description": "Source configuration for read steps.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "csv",
                  "json",
                  "database"
                ],
                "description": "Type of the source data."
              },
              "filepath": {
                "type": "string",
                "description": "Path to the source file or database connection string."
              },
              "separator": {
                "type": "string",
                "maxLength": 1,
                "description": "Delimiter used in CSV files."
              },
              "columns": {
                "type": "array",
                "description": "List of columns for a database source (defines the schema).",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Column name."
                    },
                    "data_type": {
                      "type": "string",
                      "enum": [
                        "string",
                        "number",
                        "boolean",
                        "date",
                        "timestamp",
                        "json"
                      ],
                      "description": "Data type of the column."
                    }
                  },
                  "required": [
                    "name",
                    "data_type"
                  ]
                }
              }
            },
            "required": [
              "type",
              "filepath"
            ],
            "if": {
              "properties": {
                "type": {
                  "const": "database"
                }
              }
            },
            "then": {
              "required": [
                "columns"
              ]
            }
          },
          "filter": {
            "type": "object",
            "description": "Filter configuration to apply conditions on data.",
            "properties": {
              "column": {
                "type": "string",
                "description": "Column on which the filter condition is applied."
              },
              "condition": {
                "type": "string",
                "enum": [
                  ">",
                  "<",
                  "==",
                  "!=",
                  ">=",
                  "<="
                ],
                "description": "Comparison operator for filtering."
              },
              "value": {
                "type": [
                  "string",
                  "number"
                ],
                "description": "Value to compare the column against."
              }
            },
            "required": [
              "column",
              "condition",
              "value"
            ]
          },
          "split": {
            "type": "object",
            "description": "Split configuration to branch the pipeline.",
            "properties": {
              "parallel": {
                "type": "boolean",
                "description": "If branches should run in parallel."
              },
              "branches": {
                "type": "array",
                "description": "Branches in the split component.",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the branch."
                    },
                    "steps": {
                      "type": "array",
                      "description": "List of steps within this branch.",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "name",
                    "steps"
                  ]
                }
              }
            },
            "required": [
              "parallel",
              "branches"
            ]
          },
          "group": {
            "type": "object",
            "description": "Group configuration to aggregate data.",
            "properties": {
              "column": {
                "type": "string",
                "description": "Column to group by."
              },
              "aggregation": {
                "type": "array",
                "description": "List of aggregation operations.",
                "items": {
                  "type": "object",
                  "properties": {
                    "column": {
                      "type": "string",
                      "description": "Column on which to perform the aggregation."
                    },
                    "function": {
                      "type": "string",
                      "enum": [
                        "sum",
                        "mean",
                        "count",
                        "max",
                        "min"
                      ],
                      "description": "Aggregation function to apply."
                    }
                  },
                  "required": [
                    "column",
                    "function"
                  ]
                }
              }
            },
            "required": [
              "column",
              "aggregation"
            ]
          },
          "join": {
            "type": "object",
            "description": "Join configuration to merge data from different components.",
            "properties": {
              "with": {
                "type": "string",
                "description": "Identifier of the component to join with."
              },
              "on": {
                "type": "string",
                "description": "Column used for joining data."
              }
            },
            "required": [
              "with",
              "on"
            ]
          },
          "write": {
            "type": "object",
            "description": "Write configuration for output data.",
            "properties": {
              "concurrent_write": {
                "type": "boolean",
                "description": "Indicates if data should be written concurrently."
              },
              "target": {
                "type": "array",
                "description": "List of target configurations for writing data.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "csv",
                        "json"
                      ],
                      "description": "Type of the output target."
                    },
                    "filepath": {
                      "type": "string",
                      "description": "Path to the output file."
                    },
                    "separator": {
                      "type": "string",
                      "maxLength": 1,
                      "description": "Delimiter used in CSV output files."
                    }
                  },
                  "required": [
                    "type",
                    "filepath"
                  ]
                }
              }
            },
            "required": [
              "concurrent_write",
              "target"
            ]
          },
          "hook": {
            "type": "object",
            "description": "Hook configuration for integrating third-party services for data quality checks or external validations.",
            "properties": {
              "url": {
                "type": "string",
                "description": "Endpoint URL for the hook call."
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE"
                ],
                "description": "HTTP method used to call the hook service."
              },
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "HTTP headers to include in the hook request."
              },
              "payload": {
                "type": "object",
                "description": "Optional payload for POST or PUT requests."
              },
              "timeout": {
                "type": "integer",
                "description": "Timeout in seconds for the hook request."
              }
            },
            "required": [
              "url",
              "method"
            ]
          },
          "custom": {
            "type": "object",
            "description": "Custom component configuration using a Jinja2 template for user-defined processing.",
            "properties": {
              "template": {
                "type": "string",
                "description": "A Jinja2 template used to process data."
              }
            },
            "required": [
              "template"
            ]
          }
        },
        "required": [
          "component_id",
          "step"
        ]
      }
    }
  },
  "required": [
    "pipeline_id",
    "pipeline_description",
    "execution_mode",
    "threads",
    "batch_size",
    "incremental",
    "last_processed_timestamp",
    "bulk_processing",
    "steps"
  ]
}